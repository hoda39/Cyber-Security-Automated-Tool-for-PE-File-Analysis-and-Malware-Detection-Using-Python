import os
import hashlib
from datetime import datetime
import shutil
from config import *
from utils import *
import pdfkit
import pefile
import requests
import bs4


class StaticMalwareAnalysis:
    def __init__(self, sample_name):
        self.path = config["malware-sample-folder"]
        self.saved_analysis_folder = config["saved-analysis"]
        self.sample_file = sample_name  # malware-folder/mal.exe
        self.sample_name = os.path.basename(sample_name)  # mal.exe
        self.sample_name_dir = ""  # saved-analysis/mal.exe-timestamp/
        self.information = {
            "archirecture": "",
            "sha256_hash": "",
            "malicious_api": [],
            "other_api": [],
            "virustotal_results": None,
            "strings_file": "",
            "sections": [],
            "saved_to": "",
        }


    def create_directory(self):
        if not os.path.exists(self.saved_analysis_folder):
            os.mkdir(self.saved_analysis_folder)
        sample_name_dir = (
            self.sample_name
            + "_"
            + str(datetime.now()).replace(" ", "-").replace(":", "").replace(".", "")
        )
        os.mkdir(os.path.join(self.saved_analysis_folder, sample_name_dir))
        self.sample_name_dir = os.path.join(self.saved_analysis_folder, sample_name_dir)
        return sample_name_dir

    def get_sha256sum(self):
        hash_function = hashlib.sha256()
        with open(self.sample_file, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                hash_function.update(byte_block)
            hash_value = hash_function.hexdigest()
        self.information["sha256_hash"] = hash_value
        return hash_value

    def extract_strings(self):
        output_file_txt = "strings.txt"
        # output_file_html = os.path.join(
        #     self.sample_name_dir, f"{self.sample_name}-strings.html"
        # )
        command = f"strings.exe -n 6 {self.sample_name_dir}  > {output_file_txt}"

        os.system(command)


    def malAPICheck(self, api):
        api_request = requests.get("https://malapi.io/winapi/" + api)
        api_request.raise_for_status()
        api_data = bs4.BeautifulSoup(api_request.text, "html.parser")

        if "404 Not Found" in api_data.getText():
            # print(f"API NOT FOUND - {api}")
            return "No result", "No result"

        details = api_data.select(".detail-container .content")
        api_description = details[1].getText().lstrip().rstrip()
        api_associated_attacks = " ".join(
            details[3].getText().lstrip().rstrip().split()
        )
        print(f"API FOUND - {api}")
        return api_description, api_associated_attacks

    def extractPEINFO(self):
        try:
            pe = pefile.PE(self.sample_file)

            if hex(pe.FILE_HEADER.Machine) == "0x14c":
                self.information["archirecture"] = "32 bit binary"
            else:
                self.information["archirecture"] = "64 bit binary"

            for section in pe.sections:
                section_name = section.Name.decode().rstrip("\x00")
                self.information["sections"].append(
                    (
                        f"{section_name}",
                        hex(section.Misc_VirtualSize),
                        hex(section.SizeOfRawData),
                        str(hex(section.Misc_VirtualSize) > hex(section.SizeOfRawData)),
                    )
                )

            pe.parse_data_directories()
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                for imp in entry.imports:
                    api = imp.name.decode("utf-8")
                    try:
                        if api[0] != "_":
                            desc, tags = self.malAPICheck(api)
                            if desc == "No result" or tags == "No result":
                                self.information["other_api"].append(api)
                            else:
                                self.information["malicious_api"].append(
                                    (api, desc.replace(",", ""), tags)
                                )
                    except:
                        self.information["other_api"].append(api)
            return self.information
        except Exception as e:
            print("Error occurred in collecting PE Info")
            print(e)
            return False
